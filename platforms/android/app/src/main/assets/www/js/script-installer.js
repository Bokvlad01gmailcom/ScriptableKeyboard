// –£—Å—Ç–∞–Ω–æ–≤—â–∏–∫ —Å–∫—Ä–∏–ø—Ç–æ–≤ —á–µ—Ä–µ–∑ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
const ScriptInstaller = {
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞ –∏–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    installFromWeb(scriptData) {
        Debug.info('=== INSTALLING SCRIPT FROM WEB ===', scriptData);
        
        try {
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–∞
            if (!this.validateScript(scriptData)) {
                throw new Error('Invalid script data');
            }
            
            // –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞
            const script = {
                id: 'web_' + Date.now(),
                name: scriptData.name,
                icon: scriptData.icon || 'üìú',
                description: scriptData.description || '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å',
                code: scriptData.code,
                userCreated: true,
                installedFrom: 'web',
                installDate: new Date().toISOString()
            };
            
            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–∏—Å—Ç–µ–º—É —Å–∫—Ä–∏–ø—Ç–æ–≤
            ScriptManager.addScript(script);
            ScriptManager.saveUserScripts();
            
            Debug.info('Script installed successfully', script.name);
            
            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            KeyboardManager.showNotification(`–°–∫—Ä–∏–ø—Ç "${script.name}" —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!`);
            
            return {
                success: true,
                scriptId: script.id,
                message: 'Script installed successfully'
            };
            
        } catch (e) {
            Debug.error('Script installation failed', e.message);
            return {
                success: false,
                error: e.message
            };
        }
    },
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞
    validateScript(scriptData) {
        if (!scriptData.name || typeof scriptData.name !== 'string') {
            throw new Error('Script name is required');
        }
        
        if (!scriptData.code || typeof scriptData.code !== 'string') {
            throw new Error('Script code is required');
        }
        
        if (scriptData.name.length > 50) {
            throw new Error('Script name too long');
        }
        
        if (scriptData.code.length > 10000) {
            throw new Error('Script code too long');
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–ø–∞—Å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        const dangerousFunctions = [
            'eval(',
            'Function(',
            'setTimeout(',
            'setInterval(',
            'XMLHttpRequest',
            'fetch(',
            'import(',
            'require('
        ];
        
        const codeUpper = scriptData.code.toUpperCase();
        for (const dangerous of dangerousFunctions) {
            if (codeUpper.includes(dangerous.toUpperCase())) {
                Debug.warn('Script contains potentially dangerous function', dangerous);
                // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º, –Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º
            }
        }
        
        return true;
    },
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤
    getInstalledScripts() {
        const scripts = ScriptManager.getAllScripts();
        return scripts.map(script => ({
            id: script.id,
            name: script.name,
            icon: script.icon,
            description: script.description,
            userCreated: script.userCreated,
            installedFrom: script.installedFrom,
            installDate: script.installDate
        }));
    },
    
    // –£–¥–∞–ª–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞
    uninstallScript(scriptId) {
        Debug.info('Uninstalling script', scriptId);
        
        const success = ScriptManager.deleteScript(scriptId);
        
        if (success) {
            Debug.info('Script uninstalled successfully');
            KeyboardManager.showNotification('–°–∫—Ä–∏–ø—Ç —É–¥–∞–ª–µ–Ω');
            return { success: true };
        } else {
            Debug.error('Failed to uninstall script');
            return { success: false, error: 'Script not found' };
        }
    },
    
    // –≠–∫—Å–ø–æ—Ä—Ç —Å–∫—Ä–∏–ø—Ç–∞
    exportScript(scriptId) {
        const scripts = ScriptManager.getAllScripts();
        const script = scripts.find(s => s.id === scriptId);
        
        if (!script) {
            return { success: false, error: 'Script not found' };
        }
        
        return {
            success: true,
            script: {
                name: script.name,
                icon: script.icon,
                description: script.description,
                code: script.code,
                version: '1.0.0',
                author: 'User',
                exportDate: new Date().toISOString()
            }
        };
    },
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞
    installFromFile(fileContent) {
        try {
            const scriptData = JSON.parse(fileContent);
            return this.installFromWeb(scriptData);
        } catch (e) {
            Debug.error('Failed to parse script file', e.message);
            return { success: false, error: 'Invalid script file format' };
        }
    },
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ —Å–∫—Ä–∏–ø—Ç–æ–≤
    getExampleScripts() {
        return [
            {
                name: '–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞',
                icon: 'üìÖ',
                description: '–í—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì',
                code: `
const now = new Date();
const day = String(now.getDate()).padStart(2, '0');
const month = String(now.getMonth() + 1).padStart(2, '0');
const year = now.getFullYear();
const dateString = \`\${day}.\${month}.\${year}\`;
KeyboardManager.typeText(dateString);
KeyboardManager.showNotification('–î–∞—Ç–∞ –≤—Å—Ç–∞–≤–ª–µ–Ω–∞: ' + dateString);`
            },
            {
                name: '–°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ',
                icon: 'üé≤',
                description: '–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100',
                code: `
const randomNum = Math.floor(Math.random() * 100) + 1;
KeyboardManager.typeText(randomNum.toString());
KeyboardManager.showNotification('–°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ: ' + randomNum);`
            },
            {
                name: 'Lorem Ipsum',
                icon: 'üìù',
                description: '–í—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç Lorem Ipsum',
                code: `
const lorem = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.";
KeyboardManager.typeText(lorem);
KeyboardManager.showNotification('Lorem Ipsum –≤—Å—Ç–∞–≤–ª–µ–Ω');`
            },
            {
                name: '–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞',
                icon: 'üîÑ',
                description: '–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–ª–æ–≤–∞',
                code: `
// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞
navigator.clipboard.readText().then(text => {
    if (text) {
        const words = text.split(' ');
        const lastWord = words[words.length - 1];
        const toggledWord = lastWord === lastWord.toUpperCase() ? 
            lastWord.toLowerCase() : lastWord.toUpperCase();
        
        words[words.length - 1] = toggledWord;
        const newText = words.join(' ');
        
        KeyboardManager.typeText(newText);
        KeyboardManager.showNotification('–†–µ–≥–∏—Å—Ç—Ä –∏–∑–º–µ–Ω–µ–Ω: ' + toggledWord);
    }
}).catch(() => {
    KeyboardManager.showNotification('–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –≤ –±—É—Ñ–µ—Ä–µ –æ–±–º–µ–Ω–∞');
});`
            }
        ];
    }
};

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø
window.ScriptInstaller = ScriptInstaller;