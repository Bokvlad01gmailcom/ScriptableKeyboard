// –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∫—Ä–∏–ø—Ç–æ–≤ - —Å–∏—Å—Ç–µ–º–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
const ScriptManager = {
    scripts: [],
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    init() {
        this.loadDefaultScripts();
        this.loadUserScripts();
        console.log('ScriptManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    },
    
    // –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã
    loadDefaultScripts() {
        // –ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥
        this.addScript({
            id: 'voice_input',
            name: '–ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥',
            icon: 'üé§',
            description: '–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏',
            code: `
                function voiceInput() {
                    if (typeof navigator.mediaDevices !== 'undefined') {
                        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Web Speech API
                        const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();
                        recognition.lang = 'ru-RU';
                        recognition.onresult = function(event) {
                            const text = event.results[0][0].transcript;
                            KeyboardManager.typeText(text);
                        };
                        recognition.start();
                    } else {
                        // Fallback - –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –≥–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥
                        try {
                            cordova.exec(null, null, 'VoicePlugin', 'startVoiceInput', []);
                        } catch (e) {
                            KeyboardManager.showNotification('–ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
                        }
                    }
                }
                voiceInput();
            `
        });
        
        // –≠–º–æ–¥–∑–∏
        this.addScript({
            id: 'emoji_panel',
            name: '–ü–∞–Ω–µ–ª—å —ç–º–æ–¥–∑–∏',
            icon: 'üòÄ',
            description: '–ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ —ç–º–æ–¥–∑–∏',
            code: `
                const emojis = ['üòÄ', 'üòÇ', 'üòç', 'ü§î', 'üëç', 'üëé', '‚ù§Ô∏è', 'üî•', 'üíØ', 'üéâ'];
                const randomEmoji = emojis[Math.floor(Math.random() * emojis.length)];
                KeyboardManager.typeText(randomEmoji);
            `
        });
        
        // –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        this.addScript({
            id: 'current_time',
            name: '–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è',
            icon: 'üïê',
            description: '–í—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è',
            code: `
                const now = new Date();
                const timeString = now.toLocaleTimeString('ru-RU');
                KeyboardManager.typeText(timeString);
            `
        });
        
        // –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π
        this.addScript({
            id: 'password_generator',
            name: '–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π',
            icon: 'üîê',
            description: '–°–æ–∑–¥–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–æ–ª—å',
            code: `
                function generatePassword(length = 12) {
                    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*';
                    let password = '';
                    for (let i = 0; i < length; i++) {
                        password += chars.charAt(Math.floor(Math.random() * chars.length));
                    }
                    return password;
                }
                const password = generatePassword();
                KeyboardManager.typeText(password);
                KeyboardManager.showNotification('–ü–∞—Ä–æ–ª—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: ' + password);
            `
        });
        
        // –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
        this.addScript({
            id: 'calculator',
            name: '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä',
            icon: 'üßÆ',
            description: '–ü—Ä–æ—Å—Ç–æ–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä',
            code: `
                const expression = prompt('–í–≤–µ–¥–∏—Ç–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2+2*3):');
                if (expression) {
                    try {
                        const result = eval(expression);
                        KeyboardManager.typeText(result.toString());
                        KeyboardManager.showNotification(expression + ' = ' + result);
                    } catch (e) {
                        KeyboardManager.showNotification('–û—à–∏–±–∫–∞ –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏–∏');
                    }
                }
            `
        });
    },
    
    // –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–∫—Ä–∏–ø—Ç—ã
    loadUserScripts() {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ localStorage
        const saved = localStorage.getItem('userScripts');
        if (saved) {
            try {
                const userScripts = JSON.parse(saved);
                userScripts.forEach(script => this.addScript(script));
            } catch (e) {
                console.log('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤');
            }
        }
    },
    
    // –î–æ–±–∞–≤–∏—Ç—å —Å–∫—Ä–∏–ø—Ç
    addScript(script) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∫—Ä–∏–ø—Ç –Ω–µ –¥—É–±–ª–∏—Ä—É–µ—Ç—Å—è
        const existing = this.scripts.find(s => s.id === script.id);
        if (!existing) {
            this.scripts.push(script);
            console.log('–°–∫—Ä–∏–ø—Ç –¥–æ–±–∞–≤–ª–µ–Ω:', script.name);
        }
    },
    
    // –í—ã–ø–æ–ª–Ω–∏—Ç—å —Å–∫—Ä–∏–ø—Ç
    executeScript(scriptId) {
        const script = this.scripts.find(s => s.id === scriptId);
        if (script) {
            try {
                console.log('–í—ã–ø–æ–ª–Ω—è–µ–º —Å–∫—Ä–∏–ø—Ç:', script.name);
                // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–¥ —Å–∫—Ä–∏–ø—Ç–∞ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
                const func = new Function('KeyboardManager', 'ScriptManager', script.code);
                func(KeyboardManager, ScriptManager);
            } catch (e) {
                console.error('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞:', e);
                KeyboardManager.showNotification('–û—à–∏–±–∫–∞ –≤ —Å–∫—Ä–∏–ø—Ç–µ: ' + script.name);
            }
        }
    },
    
    // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–∫—Ä–∏–ø—Ç—ã
    getAllScripts() {
        return this.scripts;
    },
    
    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–∫—Ä–∏–ø—Ç—ã
    saveUserScripts() {
        const userScripts = this.scripts.filter(s => s.userCreated);
        localStorage.setItem('userScripts', JSON.stringify(userScripts));
    },
    
    // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç
    createScript(name, code, icon = 'üìú') {
        const script = {
            id: 'user_' + Date.now(),
            name: name,
            icon: icon,
            description: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç',
            code: code,
            userCreated: true
        };
        
        this.addScript(script);
        this.saveUserScripts();
        return script;
    },
    
    // –£–¥–∞–ª–∏—Ç—å —Å–∫—Ä–∏–ø—Ç
    deleteScript(scriptId) {
        const index = this.scripts.findIndex(s => s.id === scriptId);
        if (index !== -1) {
            this.scripts.splice(index, 1);
            this.saveUserScripts();
            return true;
        }
        return false;
    },
    
    // –î–æ–±–∞–≤–∏—Ç—å —Å–∫—Ä–∏–ø—Ç—ã –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    addScriptsToKeyboard() {
        // –î–æ–±–∞–≤–ª—è–µ–º —Ä—è–¥ —Å–æ —Å–∫—Ä–∏–ø—Ç–∞–º–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        const scriptRow = this.scripts.slice(0, 5).map(script => ({
            text: script.icon,
            action: 'script',
            script: script.id,
            style: 'background: #9b59b6; color: white;'
        }));
        
        return scriptRow;
    }
};