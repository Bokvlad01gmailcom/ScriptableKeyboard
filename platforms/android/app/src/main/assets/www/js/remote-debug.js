// –£–¥–∞–ª–µ–Ω–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ —á–µ—Ä–µ–∑ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
const RemoteDebug = {
    server: null,
    port: 8888,
    isRunning: false,
    clients: [],
    
    // –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    start() {
        Debug.info('=== STARTING REMOTE DEBUG SERVER ===');
        
        if (this.isRunning) {
            Debug.warn('Remote debug server already running');
            return;
        }
        
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π HTTP —Å–µ—Ä–≤–µ—Ä Cordova
            if (typeof cordova !== 'undefined' && cordova.plugins && cordova.plugins.httpd) {
                this.startCordovaServer();
            } else {
                // Fallback - WebSocket —Å–µ—Ä–≤–µ—Ä
                this.startWebSocketServer();
            }
        } catch (e) {
            Debug.error('Failed to start remote debug server', e);
            this.startSimpleServer();
        }
    },
    
    // –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ WebRTC
    startSimpleServer() {
        Debug.info('Starting simple debug server');
        
        // –°–æ–∑–¥–∞–µ–º –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        this.createDebugInterface();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –ª–æ–≥–æ–≤
        this.startLogBroadcast();
        
        this.isRunning = true;
        Debug.info(`Remote debug available at: http://${this.getLocalIP()}:${this.port}/debug`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º QR –∫–æ–¥ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        this.showConnectionInfo();
    },
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –æ—Ç–ª–∞–¥–∫–∏
    createDebugInterface() {
        // –°–æ–∑–¥–∞–µ–º —Å–∫—Ä—ã—Ç—ã–π iframe —Å –æ—Ç–ª–∞–¥–æ—á–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
        const iframe = document.createElement('iframe');
        iframe.id = 'debugInterface';
        iframe.style.cssText = 'display: none;';
        iframe.srcdoc = this.getDebugHTML();
        document.body.appendChild(iframe);
        
        // –°–æ–∑–¥–∞–µ–º WebSocket –¥–ª—è —Å–≤—è–∑–∏
        this.setupWebSocket();
    },
    
    // HTML –¥–ª—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    getDebugHTML() {
        return `
<!DOCTYPE html>
<html>
<head>
    <title>ScriptableKeyboard Debug</title>
    <meta charset="utf-8">
    <style>
        body { font-family: monospace; background: #000; color: #0f0; margin: 0; padding: 20px; }
        .header { background: #111; padding: 10px; margin-bottom: 20px; border-radius: 5px; }
        .log-container { height: 400px; overflow-y: auto; background: #111; padding: 10px; border-radius: 5px; }
        .log { margin: 2px 0; padding: 2px 5px; }
        .error { color: #f44; background: rgba(255,68,68,0.1); }
        .warn { color: #fa0; background: rgba(255,170,0,0.1); }
        .info { color: #4af; background: rgba(68,170,255,0.1); }
        .debug { color: #0f0; }
        .controls { margin: 20px 0; }
        button { background: #333; color: #0f0; border: 1px solid #0f0; padding: 10px; margin: 5px; cursor: pointer; }
        button:hover { background: #0f0; color: #000; }
        .status { padding: 10px; background: #111; border-radius: 5px; margin: 10px 0; }
        .command-input { width: 100%; background: #111; color: #0f0; border: 1px solid #333; padding: 10px; }
    </style>
</head>
<body>
    <div class="header">
        <h1>üêõ ScriptableKeyboard Remote Debug</h1>
        <div class="status" id="status">–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...</div>
    </div>
    
    <div class="controls">
        <button onclick="sendCommand('Debug.checkSystem()')">üîç System Check</button>
        <button onclick="sendCommand('checkPermissions()')">üîê Check Permissions</button>
        <button onclick="sendCommand('showFloatingButton()')">üéØ Show Button</button>
        <button onclick="sendCommand('Debug.clearLogs()')">üßπ Clear Logs</button>
        <button onclick="refreshLogs()">üîÑ Refresh</button>
    </div>
    
    <div>
        <input type="text" class="command-input" id="commandInput" placeholder="–í–≤–µ–¥–∏—Ç–µ JavaScript –∫–æ–º–∞–Ω–¥—É..." onkeypress="if(event.key==='Enter') executeCommand()">
        <button onclick="executeCommand()">‚ñ∂Ô∏è Execute</button>
    </div>
    
    <div class="log-container" id="logs">
        <div class="debug">–û–∂–∏–¥–∞–Ω–∏–µ –ª–æ–≥–æ–≤...</div>
    </div>
    
    <script>
        let ws = null;
        let logs = [];
        
        function connect() {
            try {
                ws = new WebSocket('ws://localhost:8889');
                
                ws.onopen = function() {
                    document.getElementById('status').innerHTML = '‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ ScriptableKeyboard';
                    requestLogs();
                };
                
                ws.onmessage = function(event) {
                    const data = JSON.parse(event.data);
                    handleMessage(data);
                };
                
                ws.onclose = function() {
                    document.getElementById('status').innerHTML = '‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...';
                    setTimeout(connect, 2000);
                };
                
                ws.onerror = function(error) {
                    document.getElementById('status').innerHTML = '‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ' + error;
                };
            } catch (e) {
                document.getElementById('status').innerHTML = '‚ùå WebSocket –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ' + e.message;
                // Fallback - polling
                startPolling();
            }
        }
        
        function handleMessage(data) {
            if (data.type === 'logs') {
                logs = data.logs;
                updateLogs();
            } else if (data.type === 'result') {
                addLog('RESULT', data.result);
            }
        }
        
        function updateLogs() {
            const container = document.getElementById('logs');
            container.innerHTML = logs.map(log => {
                const className = log.level.toLowerCase();
                return \`<div class="log \${className}">[<span style="color:#888">\${log.timestamp.split('T')[1].split('.')[0]}</span>] [\${log.level}] \${log.message}\${log.data ? '<br><span style="margin-left:20px;color:#ccc;">' + log.data + '</span>' : ''}</div>\`;
            }).join('');
            container.scrollTop = container.scrollHeight;
        }
        
        function sendCommand(command) {
            if (ws && ws.readyState === WebSocket.OPEN) {
                ws.send(JSON.stringify({type: 'command', command: command}));
            }
        }
        
        function executeCommand() {
            const input = document.getElementById('commandInput');
            const command = input.value.trim();
            if (command) {
                sendCommand(command);
                input.value = '';
            }
        }
        
        function requestLogs() {
            if (ws && ws.readyState === WebSocket.OPEN) {
                ws.send(JSON.stringify({type: 'getLogs'}));
            }
        }
        
        function refreshLogs() {
            requestLogs();
        }
        
        function addLog(level, message) {
            const timestamp = new Date().toISOString();
            logs.unshift({timestamp, level, message});
            updateLogs();
        }
        
        // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–≥–æ–≤
        setInterval(requestLogs, 2000);
        
        // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        connect();
    </script>
</body>
</html>`;
    },
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ WebSocket
    setupWebSocket() {
        // –≠–º—É–ª—è—Ü–∏—è WebSocket —á–µ—Ä–µ–∑ postMessage
        window.addEventListener('message', (event) => {
            if (event.data.type === 'debugCommand') {
                this.executeCommand(event.data.command);
            }
        });
    },
    
    // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–ª–∞–¥–∫–∏
    executeCommand(command) {
        Debug.info('Executing remote command', command);
        try {
            const result = eval(command);
            Debug.info('Command result', result);
            this.sendToClients({type: 'result', result: String(result)});
        } catch (e) {
            Debug.error('Command execution failed', e.message);
            this.sendToClients({type: 'result', result: 'ERROR: ' + e.message});
        }
    },
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞–º
    sendToClients(data) {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ postMessage
        const iframe = document.getElementById('debugInterface');
        if (iframe && iframe.contentWindow) {
            iframe.contentWindow.postMessage(data, '*');
        }
    },
    
    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–æ–≤
    startLogBroadcast() {
        setInterval(() => {
            if (this.isRunning) {
                this.sendToClients({
                    type: 'logs',
                    logs: Debug.logs
                });
            }
        }, 1000);
    },
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ IP
    getLocalIP() {
        // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å IP —á–µ—Ä–µ–∑ WebRTC
        return '192.168.1.100'; // –ó–∞–≥–ª—É—à–∫–∞
    },
    
    // –ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
    showConnectionInfo() {
        const info = document.createElement('div');
        info.id = 'remoteDebugInfo';
        info.style.cssText = `
            position: fixed;
            top: 10px;
            right: 10px;
            background: rgba(0,0,0,0.9);
            color: #0f0;
            padding: 15px;
            border: 1px solid #0f0;
            border-radius: 5px;
            font-family: monospace;
            font-size: 12px;
            z-index: 10001;
            max-width: 300px;
        `;
        
        info.innerHTML = `
            <div style="margin-bottom: 10px;">
                <strong>üåê Remote Debug Active</strong>
            </div>
            <div>Port: ${this.port}</div>
            <div>Status: Running</div>
            <div style="margin-top: 10px;">
                <button onclick="RemoteDebug.openDebugInterface()" style="background: #0f0; color: #000; border: none; padding: 5px 10px; cursor: pointer;">
                    Open Debug
                </button>
                <button onclick="RemoteDebug.stop()" style="background: #f44; color: #fff; border: none; padding: 5px 10px; cursor: pointer; margin-left: 5px;">
                    Stop
                </button>
            </div>
        `;
        
        document.body.appendChild(info);
        
        // –ê–≤—Ç–æ—Å–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            if (info.parentNode) {
                info.style.opacity = '0.3';
            }
        }, 10000);
    },
    
    // –û—Ç–∫—Ä—ã—Ç–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –æ—Ç–ª–∞–¥–∫–∏
    openDebugInterface() {
        const iframe = document.getElementById('debugInterface');
        if (iframe) {
            iframe.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                z-index: 10000;
                border: none;
                background: #000;
            `;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è
            const closeBtn = document.createElement('button');
            closeBtn.innerHTML = '‚úï';
            closeBtn.style.cssText = `
                position: fixed;
                top: 10px;
                right: 10px;
                z-index: 10001;
                background: #f44;
                color: #fff;
                border: none;
                width: 30px;
                height: 30px;
                border-radius: 50%;
                cursor: pointer;
            `;
            closeBtn.onclick = () => {
                iframe.style.display = 'none';
                closeBtn.remove();
            };
            document.body.appendChild(closeBtn);
        }
    },
    
    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    stop() {
        Debug.info('Stopping remote debug server');
        this.isRunning = false;
        
        const info = document.getElementById('remoteDebugInfo');
        if (info) info.remove();
        
        const iframe = document.getElementById('debugInterface');
        if (iframe) iframe.remove();
    }
};

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø
window.RemoteDebug = RemoteDebug;