// –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('deviceready', onDeviceReady, false);

let floatingButtonVisible = false;
let keyboardActive = false;

let debugMode = false;

function onDeviceReady() {
    Debug.info('=== DEVICE READY ===');
    updateStatus('Ready');
    
    // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    ScriptManager.init();
    checkPermissions();
    
    Debug.info('App ready');
}

function toggleDebug() {
    debugMode = !debugMode;
    const btn = document.getElementById('debugToggle');
    
    if (debugMode) {
        btn.textContent = 'üî¥';
        btn.style.background = 'rgba(255,0,0,0.5)';
        Debug.showDebugPanel();
        updateStatus('Debug ON');
    } else {
        btn.textContent = 'üêõ';
        btn.style.background = 'rgba(255,255,255,0.2)';
        Debug.hideDebugPanel();
        updateStatus('Debug OFF');
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ Intent –∑–∞–ø—É—Å–∫–∞
function checkLaunchIntent() {
    try {
        if (typeof cordova !== 'undefined' && cordova.plugins && cordova.plugins.intent) {
            cordova.plugins.intent.getIntent((intent) => {
                Debug.info('Launch intent', intent);
                if (intent.extras && intent.extras.show_floating) {
                    Debug.info('Launched from keyboard service - showing floating button');
                    setTimeout(() => forceShowFloatingButton(), 500);
                }
            });
        }
    } catch (e) {
        Debug.warn('Intent check failed', e.message);
    }
}

// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∫–∞–∑ –ø–ª–∞–≤–∞—é—â–µ–π –∫–Ω–æ–ø–∫–∏
function forceShowFloatingButton() {
    Debug.info('=== FORCE SHOW FLOATING BUTTON ===');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ overlay
    if (typeof cordova !== 'undefined' && cordova.plugins && cordova.plugins.permissions) {
        cordova.plugins.permissions.checkPermission('android.permission.SYSTEM_ALERT_WINDOW', 
            (status) => {
                if (status.hasPermission) {
                    Debug.info('Overlay permission granted - showing button');
                    showFloatingButton();
                    
                    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
                    setTimeout(() => {
                        if (!floatingButtonVisible) {
                            Debug.warn('Button still not visible - forcing again');
                            showFloatingButton();
                        }
                    }, 2000);
                } else {
                    Debug.error('No overlay permission - requesting');
                    requestOverlayPermission();
                }
            }
        );
    } else {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏
        showFloatingButton();
    }
}

function updateStatus(message) {
    const status = document.getElementById('status');
    if (status) {
        status.textContent = message;
        console.log('Status:', message);
    }
}

function enableKeyboard() {
    Debug.info('=== ENABLE KEYBOARD ===');
    updateStatus('–û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–ª–∞–≥–∏–Ω–∞
    if (typeof KeyboardPlugin === 'undefined') {
        Debug.error('KeyboardPlugin –Ω–µ –Ω–∞–π–¥–µ–Ω');
        updateStatus('–û—à–∏–±–∫–∞: KeyboardPlugin –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        
        // Fallback - –ø—Ä—è–º–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        try {
            Debug.info('–ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ—Ä–µ–∑ intent');
            const intent = {
                action: 'android.settings.INPUT_METHOD_SETTINGS',
                flags: ['FLAG_ACTIVITY_NEW_TASK']
            };
            
            if (typeof cordova !== 'undefined' && cordova.plugins && cordova.plugins.intentShim) {
                cordova.plugins.intentShim.startActivity(intent);
            } else {
                // –ï—â–µ –æ–¥–∏–Ω fallback
                window.open('android-app://com.android.settings/.Settings$InputMethodAndLanguageSettingsActivity', '_system');
            }
            updateStatus('–ù–∞–π–¥–∏—Ç–µ ScriptableKeyboard –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã');
        } catch (e) {
            Debug.error('Fallback intent failed', e);
            updateStatus('–û—Ç–∫—Ä–æ–π—Ç–µ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –Ø–∑—ã–∫ –∏ –≤–≤–æ–¥ ‚Üí –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—Ä—É—á–Ω—É—é');
        }
        return;
    }
    
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã Android
    try {
        Debug.info('–í—ã–∑—ã–≤–∞–µ–º KeyboardPlugin.openKeyboardSettings');
        KeyboardPlugin.openKeyboardSettings(
            function(success) {
                Debug.info('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –æ—Ç–∫—Ä—ã—Ç—ã', success);
                updateStatus('–í—ã–±–µ—Ä–∏—Ç–µ ScriptableKeyboard –≤ —Å–ø–∏—Å–∫–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä');
            },
            function(error) {
                Debug.error('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫', error);
                updateStatus('–û—à–∏–±–∫–∞: ' + error);
            }
        );
    } catch (e) {
        Debug.error('Exception –ø—Ä–∏ –≤—ã–∑–æ–≤–µ KeyboardPlugin', e);
        updateStatus('–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ –ø–ª–∞–≥–∏–Ω–∞: ' + e.message);
    }
}

function showFloatingButton() {
    Debug.info('=== SHOW FLOATING BUTTON ===');
    const btn = document.getElementById('floatingBtn');
    
    if (!btn) {
        Debug.error('Floating button element not found');
        updateStatus('–û—à–∏–±–∫–∞: –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
    }
    
    if (!floatingButtonVisible) {
        Debug.info('–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª–∞–≤–∞—é—â—É—é –∫–Ω–æ–ø–∫—É');
        btn.style.display = 'block';
        btn.style.position = 'fixed';
        btn.style.zIndex = '9999';
        floatingButtonVisible = true;
        updateStatus('–ü–ª–∞–≤–∞—é—â–∞—è –∫–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞');
        
        // –î–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º–æ–π
        makeButtonDraggable(btn);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        btn.onclick = function(e) {
            Debug.info('Floating button clicked');
            toggleKeyboard();
            e.preventDefault();
            e.stopPropagation();
        };
        
        Debug.info('Floating button configured');
    } else {
        Debug.info('–°–∫—Ä—ã–≤–∞–µ–º –ø–ª–∞–≤–∞—é—â—É—é –∫–Ω–æ–ø–∫—É');
        btn.style.display = 'none';
        floatingButtonVisible = false;
        updateStatus('–ü–ª–∞–≤–∞—é—â–∞—è –∫–Ω–æ–ø–∫–∞ —Å–∫—Ä—ã—Ç–∞');
    }
}

function toggleKeyboard() {
    if (!keyboardActive) {
        KeyboardManager.show();
        keyboardActive = true;
        updateStatus('–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞');
    } else {
        KeyboardManager.hide();
        keyboardActive = false;
        updateStatus('–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–∫—Ä—ã—Ç–∞');
    }
}

function openScriptManager() {
    updateStatus('–û—Ç–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∫—Ä–∏–ø—Ç–æ–≤...');
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤
    window.location.href = 'scripts.html';
}

function openSettings() {
    updateStatus('–û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...');
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
    window.location.href = 'settings.html';
}

function makeButtonDraggable(element) {
    let isDragging = false;
    let startX, startY, initialX, initialY;
    let dragThreshold = 10; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
    let hasMoved = false;
    
    element.addEventListener('touchstart', function(e) {
        isDragging = true;
        hasMoved = false;
        startX = e.touches[0].clientX;
        startY = e.touches[0].clientY;
        initialX = element.offsetLeft;
        initialY = element.offsetTop;
        
        // –£–±–∏—Ä–∞–µ–º –ø—Ä–∏–∑—Ä–∞–∫ - –æ—á–∏—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
        element.style.right = 'auto';
        element.style.bottom = 'auto';
        
        e.preventDefault();
    });
    
    element.addEventListener('touchmove', function(e) {
        if (!isDragging) return;
        
        const currentX = e.touches[0].clientX;
        const currentY = e.touches[0].clientY;
        
        const deltaX = currentX - startX;
        const deltaY = currentY - startY;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ø–æ—Ä–æ–≥ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        if (Math.abs(deltaX) > dragThreshold || Math.abs(deltaY) > dragThreshold) {
            hasMoved = true;
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
            element.style.left = (initialX + deltaX) + 'px';
            element.style.top = (initialY + deltaY) + 'px';
            
            // –£–±–∏—Ä–∞–µ–º —Å—Ç–∏–ª–∏ –∏—Å—Ö–æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–∏–∑—Ä–∞–∫–∞
            element.style.right = 'unset';
            element.style.bottom = 'unset';
        }
        
        e.preventDefault();
    });
    
    element.addEventListener('touchend', function(e) {
        isDragging = false;
        
        // –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ –±—ã–ª–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –∫–ª–∏–∫
        if (!hasMoved) {
            // –ü–æ–∑–≤–æ–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É –∫–ª–∏–∫–∞ —Å—Ä–∞–±–æ—Ç–∞—Ç—å
            return;
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
        const rect = element.getBoundingClientRect();
        element.style.left = rect.left + 'px';
        element.style.top = rect.top + 'px';
        
        e.preventDefault();
        e.stopPropagation();
    });
}

function checkPermissions() {
    Debug.info('=== CHECK PERMISSIONS ===');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–≤–µ—Ä—Ö –¥—Ä—É–≥–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
    if (typeof cordova !== 'undefined' && cordova.plugins && cordova.plugins.permissions) {
        Debug.info('Permissions plugin available');
        const permissions = cordova.plugins.permissions;
        
        permissions.checkPermission('android.permission.SYSTEM_ALERT_WINDOW', 
            function(status) {
                Debug.info('SYSTEM_ALERT_WINDOW permission', status);
                if (status.hasPermission) {
                    updateStatus('–†–∞–∑—Ä–µ—à–µ–Ω–∏—è OK');
                } else {
                    updateStatus('–ù—É–∂–Ω—ã —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è - –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
                    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
                    requestOverlayPermission();
                }
            },
            function(error) {
                Debug.error('Permission check failed', error);
                updateStatus('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π');
            }
        );
    } else {
        Debug.warn('Permissions plugin not available');
        // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –Ω–∞—à –ø–ª–∞–≥–∏–Ω
        requestOverlayPermission();
    }
}

function requestOverlayPermission() {
    Debug.info('=== REQUEST OVERLAY PERMISSION ===');
    
    if (typeof KeyboardPlugin !== 'undefined') {
        Debug.info('Requesting permissions via KeyboardPlugin');
        KeyboardPlugin.requestPermissions(
            function(success) {
                Debug.info('Permission request success', success);
                updateStatus('–†–∞–∑—Ä–µ—à–µ–Ω–∏—è –∑–∞–ø—Ä–æ—à–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.');
            },
            function(error) {
                Debug.error('Permission request failed', error);
                updateStatus('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π: ' + error);
            }
        );
    } else {
        Debug.warn('KeyboardPlugin not available for permission request');
        updateStatus('–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ "–ü–æ–≤–µ—Ä—Ö –¥—Ä—É–≥–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π" –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö');
    }
}